# 乘矩阵
MC=[[0,0,0,0,1,0,0,1],[0,0,0,0,0,0,0,1],[0,0,0,0,0,0,1,0],
    [0,0,0,1,0,0,1,0],[0,0,0,0,0,0,1,0],[0,0,0,0,0,1,0,0],
    [0,0,1,0,0,1,0,0],[0,0,0,0,0,1,0,0],[0,0,0,0,1,0,0,0],
    [0,1,0,0,1,0,0,0],[0,0,0,0,1,0,0,0],[0,0,0,1,0,0,0,0],
    [1,0,0,1,0,0,0,0],[0,0,0,1,0,0,0,0],[0,0,1,0,0,0,0,0],
    [0,0,1,1,1,0,1,1],[0,0,1,0,0,0,0,0],[0,1,0,0,0,0,0,0],
    [0,1,1,1,0,1,1,0],[0,1,0,0,0,0,0,0],[1,0,0,0,0,0,0,0],
    [1,1,1,0,1,1,0,0],[1,0,0,0,0,0,0,0],[0,0,0,1,1,0,1,1],

    [0,0,0,0,0,0,1,0],[0,0,0,0,1,0,0,1],[0,0,0,0,0,0,0,1],
    [0,0,0,0,0,1,0,0],[0,0,0,1,0,0,1,0],[0,0,0,0,0,0,1,0],
    [0,0,0,0,1,0,0,0],[0,0,1,0,0,1,0,0],[0,0,0,0,0,1,0,0],
    [0,0,0,1,0,0,0,0],[0,1,0,0,1,0,0,0],[0,0,0,0,1,0,0,0],
    [0,0,1,0,0,0,0,0],[1,0,0,1,0,0,0,0],[0,0,0,1,0,0,0,0],
    [0,1,0,0,0,0,0,0],[0,0,1,1,1,0,1,1],[0,0,1,0,0,0,0,0],
    [1,0,0,0,0,0,0,0],[0,1,1,1,0,1,1,0],[0,1,0,0,0,0,0,0],
    [0,0,0,1,1,0,1,1],[1,1,1,0,1,1,0,0],[1,0,0,0,0,0,0,0],

    [0,0,0,0,0,0,0,1],[0,0,0,0,0,0,1,0],[0,0,0,0,1,0,0,1],
    [0,0,0,0,0,0,1,0],[0,0,0,0,0,1,0,0],[0,0,0,1,0,0,1,0],
    [0,0,0,0,0,1,0,0],[0,0,0,0,1,0,0,0],[0,0,1,0,0,1,0,0],
    [0,0,0,0,1,0,0,0],[0,0,0,1,0,0,0,0],[0,1,0,0,1,0,0,0],
    [0,0,0,1,0,0,0,0],[0,0,1,0,0,0,0,0],[1,0,0,1,0,0,0,0],
    [0,0,1,0,0,0,0,0],[0,1,0,0,0,0,0,0],[0,0,1,1,1,0,1,1],
    [0,1,0,0,0,0,0,0],[1,0,0,0,0,0,0,0],[0,1,1,1,0,1,1,0],
    [1,0,0,0,0,0,0,0],[0,0,0,1,1,0,1,1],[1,1,1,0,1,1,0,0]]
MC_1=[[0,0,0,0,0,0,0,1],
     [0,0,0,0,0,0,1,0],
     [0,0,0,0,0,1,0,0],
     [0,0,0,0,1,0,0,0],
     [0,0,0,1,0,0,0,0],
     [0,0,1,0,0,0,0,0],
     [0,1,0,0,0,0,0,0],
     [1,0,0,0,0,0,0,0]]
MC_2=[[0,0,0,0,0,0,1,0],
      [0,0,0,0,0,1,0,0],
      [0,0,0,0,1,0,0,0],
      [0,0,0,1,0,0,0,0],
      [0,0,1,0,0,0,0,0],
      [0,1,0,0,0,0,0,0],
      [1,0,0,0,0,0,0,0],
      [0,0,0,1,1,0,1,1]]
MC_9=[[0,0,0,0,1,0,0,1],
      [0,0,0,1,0,0,1,0],
      [0,0,1,0,0,1,0,0],
      [0,1,0,0,1,0,0,0],
      [1,0,0,1,0,0,0,0],
      [0,0,1,1,1,0,1,1],
      [0,1,1,1,0,1,1,0],
      [1,1,1,0,1,1,0,0]]

# A=[
# #     s1
# [205,206,207,208,209,210,211,212],
# [213, 214, 215, 216, 217, 218, 219, 220],
# #    s2
# [221, 222, 223, 224, 225, 226, 227, 228],
# [229, 230, 231, 232, 233, 234, 235, 236],
# #    s3
# [237, 238, 239, 240, 241, 242, 243, 244],
# [245, 246, 247, 248, 249, 250, 251, 252],
# #    s4
# [253, 254, 255, 256, 257, 258, 259, 260],
# [261, 262, 263, 264, 265, 266, 267, 268],
# #    s5
# [269, 270, 271, 272, 273, 274, 275, 276],
# [277, 278, 279, 280, 281, 282, 283, 284],
# #    s6
# [285, 286, 287, 288, 289, 290, 291, 292],
# [293, 294, 295, 296, 297, 298, 299, 300]]

# r4SR后的变量
# A=[
# # s1
# #     G0
# # [325,326,327,328,329,330,331,332],
# #     G1
# [333, 334, 335, 336, 337, 338, 339, 340],
# # #       s2
# [341, 342, 343, 344, 345, 346, 347, 348],
# # #       s3
# [349, 350, 351, 352, 353, 354, 355, 356],
# # #     s4
# [357, 358, 359, 360, 361, 362, 363, 364],
# #     s5
# [365, 366, 367, 368, 369, 370, 371, 372],
# # #     s6
# [373, 374, 375, 376, 377, 378, 379, 380]]

# r5SR后的变量
# 最左边变量如325为最高位，最右边变量如332为最低位
# r5G0
# A=[[737,738,739,740,741,742,743,744],
# #       s2
# [753,754,755,756,757,758,759,760],
# #       s3
# [761,762,763,764,765,766,767,768],
# #     s4
# [769,770,771,772,773,774,775,776],
# #     s5
# [777,778,779,780,781,782,783,784],
# #     s6
# [793,794,795,796,797,798,799,800]]
# r5G1
# A=[[745,746,747,748,749,750,751,752],
#    [1159,1160,1161,1162,1163,1164,1165,1166],
#    [1167,1168,1169,1170,1171,1172,1173,1174],
#    [769,770,771,772,773,774,775,776],
#     [785,786,787,788,789,790,791,792],
#     [801,802,803,804,805,806,807,808]]
A=[]
B=[]
C=[]
D=[]
E=[]
F=[]
G=[]
for i in range(737,745):
    B.append(i)
A.append(B)
for i in range(753,761):
    C.append(i)
A.append(C)
for i in range(761,769):
    D.append(i)
A.append(D)
for i in range(769,777):
    E.append(i)
A.append(E)
for i in range(777,785):
    F.append(i)
A.append(F)
for i in range(793,800):
    G.append(i)
A.append(G)

def MC9(s):
    # e.g.0x09*0x6c=0x09*0x04+0x09*0x08+0x09*0x20+0x09*0x40
    # s1
    global count
    # for i in range(a,b):
    for j in range(8):
        # MC_9的第1列异或得到的值
        # MC_9从上到下分别对应A[s][i]中从右到左
        if j==0:
            # 两个bit输入xor
            print('%d %d -%d 0' %(A[s][0]*MC_9[7][j], A[s][3]*MC_9[4][j],count+1))
            print('%d -%d %d 0' % (A[s][0] * MC_9[7][j], A[s][3] * MC_9[4][j], count + 1))
            print('-%d %d %d 0' % (A[s][0] * MC_9[7][j], A[s][3] * MC_9[4][j], count + 1))
            print('-%d -%d -%d 0' % (A[s][0] * MC_9[7][j], A[s][3] * MC_9[4][j], count + 1))
            count+=1
            # 第2列
        if j==1:
    #         三个bit输入xor (1+2'+3'+4')(1'+2+3'+4')(1'+2'+3+4')(1+2+3+4')(1'+2'+3'+4)(1+2+3'+4)(1+2'+3+4)(1'+2+3+4)
            print('%d -%d -%d -%d 0' % (A[s][0] * MC_9[7][j], A[s][1] * MC_9[6][j],A[s][4] * MC_9[3][j], count + 1))
            print('-%d %d -%d -%d 0' % (A[s][0] * MC_9[7][j], A[s][1] * MC_9[6][j],A[s][4] * MC_9[3][j], count + 1))
            print('-%d -%d %d -%d 0' % (A[s][0] * MC_9[7][j], A[s][1] * MC_9[6][j],A[s][4] * MC_9[3][j], count + 1))
            print('-%d -%d -%d %d 0' % (A[s][0] * MC_9[7][j], A[s][1] * MC_9[6][j],A[s][4] * MC_9[3][j], count + 1))
            print('%d %d %d -%d 0' % (A[s][0] * MC_9[7][j], A[s][1] * MC_9[6][j],A[s][4] * MC_9[3][j], count + 1))
            print('%d %d -%d %d 0' % (A[s][0] * MC_9[7][j], A[s][1] * MC_9[6][j],A[s][4] * MC_9[3][j], count + 1))
            print('%d -%d %d %d 0' % (A[s][0] * MC_9[7][j], A[s][1] * MC_9[6][j],A[s][4] * MC_9[3][j], count + 1))
            print('-%d %d %d %d 0' % (A[s][0] * MC_9[7][j], A[s][1] * MC_9[6][j],A[s][4] * MC_9[3][j], count + 1))
            count+=1
        # 第3列
        if j==2:
    # 4个bitxor  (1'+2'+3'+4'+5')(1+2+3'+4'+5')(1+2'+3+4'+5')(1'+2+3+4'+5')(1+2'+3'+4+5')(1'+2+3'+4+5')(1'+2'+3+4+5')(1+2+3+4+5')(1+2'+3'+4'+5)(1'+2+3'+4'+5)(1'+2'+3+4'+5)(1+2+3+4'+5)(1'+2'+3'+4+5)(1+2+3'+4+5)(1+2'+3+4+5)(1'+2+3+4+5);
            print('-%d -%d -%d -%d -%d 0' % (A[s][0] * MC_9[7][j], A[s][1] * MC_9[6][j], A[s][2] * MC_9[5][j], A[s][5] * MC_9[2][j], count + 1))
            print('%d %d -%d -%d -%d 0' % (A[s][0] * MC_9[7][j], A[s][1] * MC_9[6][j], A[s][2] * MC_9[5][j], A[s][5] * MC_9[2][j], count + 1))
            print('%d -%d %d -%d -%d 0' % (A[s][0] * MC_9[7][j], A[s][1] * MC_9[6][j], A[s][2] * MC_9[5][j], A[s][5] * MC_9[2][j], count + 1))
            print('-%d %d %d -%d -%d 0' % (A[s][0] * MC_9[7][j], A[s][1] * MC_9[6][j], A[s][2] * MC_9[5][j], A[s][5] * MC_9[2][j], count + 1))
            print('%d -%d -%d %d -%d 0' % (A[s][0] * MC_9[7][j], A[s][1] * MC_9[6][j], A[s][2] * MC_9[5][j], A[s][5] * MC_9[2][j], count + 1))
            print('-%d %d -%d %d -%d 0' % (A[s][0] * MC_9[7][j], A[s][1] * MC_9[6][j], A[s][2] * MC_9[5][j], A[s][5] * MC_9[2][j], count + 1))
            print('-%d -%d %d %d -%d 0' % (A[s][0] * MC_9[7][j], A[s][1] * MC_9[6][j], A[s][2] * MC_9[5][j], A[s][5] * MC_9[2][j], count + 1))
            print('%d %d %d %d -%d 0' % (A[s][0] * MC_9[7][j], A[s][1] * MC_9[6][j], A[s][2] * MC_9[5][j], A[s][5] * MC_9[2][j], count + 1))
            print('%d -%d -%d -%d %d 0' % (
            A[s][0] * MC_9[7][j], A[s][1] * MC_9[6][j], A[s][2] * MC_9[5][j], A[s][5] * MC_9[2][j], count + 1))
            print('-%d %d -%d -%d %d 0' % (
            A[s][0] * MC_9[7][j], A[s][1] * MC_9[6][j], A[s][2] * MC_9[5][j], A[s][5] * MC_9[2][j], count + 1))
            print('-%d -%d %d -%d %d 0' % (
            A[s][0] * MC_9[7][j], A[s][1] * MC_9[6][j], A[s][2] * MC_9[5][j], A[s][5] * MC_9[2][j], count + 1))
            print('%d %d %d -%d %d 0' % (
            A[s][0] * MC_9[7][j], A[s][1] * MC_9[6][j], A[s][2] * MC_9[5][j], A[s][5] * MC_9[2][j], count + 1))
            print('-%d -%d -%d %d %d 0' % (
            A[s][0] * MC_9[7][j], A[s][1] * MC_9[6][j], A[s][2] * MC_9[5][j], A[s][5] * MC_9[2][j], count + 1))
            print('%d %d -%d %d %d 0' % (
            A[s][0] * MC_9[7][j], A[s][1] * MC_9[6][j], A[s][2] * MC_9[5][j], A[s][5] * MC_9[2][j], count + 1))
            print('%d -%d %d %d %d 0' % (
            A[s][0] * MC_9[7][j], A[s][1] * MC_9[6][j], A[s][2] * MC_9[5][j], A[s][5] * MC_9[2][j], count + 1))
            print('-%d %d %d %d %d 0' % (
            A[s][0] * MC_9[7][j], A[s][1] * MC_9[6][j], A[s][2] * MC_9[5][j], A[s][5] * MC_9[2][j], count + 1))
            count+=1
    # 第4列

        if j==3:
            print('-%d -%d -%d -%d -%d 0' % (
            A[s][1] * MC_9[6][j], A[s][2] * MC_9[5][j], A[s][3] * MC_9[4][j], A[s][6] * MC_9[1][j], count + 1))
            print('%d %d -%d -%d -%d 0' % (
            A[s][1] * MC_9[6][j], A[s][2] * MC_9[5][j], A[s][3] * MC_9[4][j], A[s][6] * MC_9[1][j], count + 1))
            print('%d -%d %d -%d -%d 0' % (
            A[s][1] * MC_9[6][j], A[s][2] * MC_9[5][j], A[s][3] * MC_9[4][j], A[s][6] * MC_9[1][j], count + 1))
            print('-%d %d %d -%d -%d 0' % (
            A[s][1] * MC_9[6][j], A[s][2] * MC_9[5][j], A[s][3] * MC_9[4][j], A[s][6] * MC_9[1][j], count + 1))
            print('%d -%d -%d %d -%d 0' % (
            A[s][1] * MC_9[6][j], A[s][2] * MC_9[5][j], A[s][3] * MC_9[4][j], A[s][6] * MC_9[1][j], count + 1))
            print('-%d %d -%d %d -%d 0' % (
            A[s][1] * MC_9[6][j], A[s][2] * MC_9[5][j], A[s][3] * MC_9[4][j], A[s][6] * MC_9[1][j], count + 1))
            print('-%d -%d %d %d -%d 0' % (
            A[s][1] * MC_9[6][j], A[s][2] * MC_9[5][j], A[s][3] * MC_9[4][j], A[s][6] * MC_9[1][j], count + 1))
            print('%d %d %d %d -%d 0' % (
                A[s][1] * MC_9[6][j], A[s][2] * MC_9[5][j], A[s][3] * MC_9[4][j], A[s][6] * MC_9[1][j], count + 1))
            print('%d -%d -%d -%d %d 0' % (
                A[s][1] * MC_9[6][j], A[s][2] * MC_9[5][j], A[s][3] * MC_9[4][j], A[s][6] * MC_9[1][j], count + 1))
            print('-%d %d -%d -%d %d 0' % (
                A[s][1] * MC_9[6][j], A[s][2] * MC_9[5][j], A[s][3] * MC_9[4][j], A[s][6] * MC_9[1][j], count + 1))
            print('-%d -%d %d -%d %d 0' % (
                A[s][1] * MC_9[6][j], A[s][2] * MC_9[5][j], A[s][3] * MC_9[4][j], A[s][6] * MC_9[1][j], count + 1))
            print('%d %d %d -%d %d 0' % (
                A[s][1] * MC_9[6][j], A[s][2] * MC_9[5][j], A[s][3] * MC_9[4][j], A[s][6] * MC_9[1][j], count + 1))
            print('-%d -%d -%d %d %d 0' % (
                A[s][1] * MC_9[6][j], A[s][2] * MC_9[5][j], A[s][3] * MC_9[4][j], A[s][6] * MC_9[1][j], count + 1))
            print('%d %d -%d %d %d 0' % (
                A[s][1] * MC_9[6][j], A[s][2] * MC_9[5][j], A[s][3] * MC_9[4][j], A[s][6] * MC_9[1][j], count + 1))
            print('%d -%d %d %d %d 0' % (
                A[s][1] * MC_9[6][j], A[s][2] * MC_9[5][j], A[s][3] * MC_9[4][j], A[s][6] * MC_9[1][j], count + 1))
            print('-%d %d %d %d %d 0' % (
                A[s][1] * MC_9[6][j], A[s][2] * MC_9[5][j], A[s][3] * MC_9[4][j], A[s][6] * MC_9[1][j], count + 1))
            count += 1
        if j==4:
            print('-%d -%d -%d -%d -%d 0' % (
                A[s][0] * MC_9[7][j], A[s][2] * MC_9[5][j], A[s][4] * MC_9[3][j], A[s][7] * MC_9[0][j], count + 1))
            print('%d %d -%d -%d -%d 0' % (
                A[s][0] * MC_9[7][j], A[s][2] * MC_9[5][j], A[s][4] * MC_9[3][j], A[s][7] * MC_9[0][j], count + 1))
            print('%d -%d %d -%d -%d 0' % (
                A[s][0] * MC_9[7][j], A[s][2] * MC_9[5][j], A[s][4] * MC_9[3][j], A[s][7] * MC_9[0][j], count + 1))
            print('-%d %d %d -%d -%d 0' % (
                A[s][0] * MC_9[7][j], A[s][2] * MC_9[5][j], A[s][4] * MC_9[3][j], A[s][7] * MC_9[0][j], count + 1))
            print('%d -%d -%d %d -%d 0' % (
                A[s][0] * MC_9[7][j], A[s][2] * MC_9[5][j], A[s][4] * MC_9[3][j], A[s][7] * MC_9[0][j], count + 1))
            print('-%d %d -%d %d -%d 0' % (
                A[s][0] * MC_9[7][j], A[s][2] * MC_9[5][j], A[s][4] * MC_9[3][j], A[s][7] * MC_9[0][j], count + 1))
            print('-%d -%d %d %d -%d 0' % (
                A[s][0] * MC_9[7][j], A[s][2] * MC_9[5][j], A[s][4] * MC_9[3][j], A[s][7] * MC_9[0][j], count + 1))
            print('%d %d %d %d -%d 0' % (
                A[s][0] * MC_9[7][j], A[s][2] * MC_9[5][j], A[s][4] * MC_9[3][j], A[s][7] * MC_9[0][j], count + 1))
            print('%d -%d -%d -%d %d 0' % (
                A[s][0] * MC_9[7][j], A[s][2] * MC_9[5][j], A[s][4] * MC_9[3][j], A[s][7] * MC_9[0][j], count + 1))
            print('-%d %d -%d -%d %d 0' % (
                A[s][0] * MC_9[7][j], A[s][2] * MC_9[5][j], A[s][4] * MC_9[3][j], A[s][7] * MC_9[0][j], count + 1))
            print('-%d -%d %d -%d %d 0' % (
                A[s][0] * MC_9[7][j], A[s][2] * MC_9[5][j], A[s][4] * MC_9[3][j], A[s][7] * MC_9[0][j], count + 1))
            print('%d %d %d -%d %d 0' % (
                A[s][0] * MC_9[7][j], A[s][2] * MC_9[5][j], A[s][4] * MC_9[3][j], A[s][7] * MC_9[0][j], count + 1))
            print('-%d -%d -%d %d %d 0' % (
                A[s][0] * MC_9[7][j], A[s][2] * MC_9[5][j], A[s][4] * MC_9[3][j], A[s][7] * MC_9[0][j], count + 1))
            print('%d %d -%d %d %d 0' % (
                A[s][0] * MC_9[7][j], A[s][2] * MC_9[5][j], A[s][4] * MC_9[3][j], A[s][7] * MC_9[0][j], count + 1))
            print('%d -%d %d %d %d 0' % (
                A[s][0] * MC_9[7][j], A[s][2] * MC_9[5][j], A[s][4] * MC_9[3][j], A[s][7] * MC_9[0][j], count + 1))
            print('-%d %d %d %d %d 0' % (
                A[s][0] * MC_9[7][j], A[s][2] * MC_9[5][j], A[s][4] * MC_9[3][j], A[s][7] * MC_9[0][j], count + 1))
            count += 1

        if j==5:
            print('%d -%d -%d -%d 0' % (A[s][0] * MC_9[7][j], A[s][1] * MC_9[6][j], A[s][5] * MC_9[2][j], count + 1))
            print('-%d %d -%d -%d 0' % (A[s][0] * MC_9[7][j], A[s][1] * MC_9[6][j], A[s][5] * MC_9[2][j], count + 1))
            print('-%d -%d %d -%d 0' % (A[s][0] * MC_9[7][j], A[s][1] * MC_9[6][j], A[s][5] * MC_9[2][j], count + 1))
            print('-%d -%d -%d %d 0' % (A[s][0] * MC_9[7][j], A[s][1] * MC_9[6][j], A[s][5] * MC_9[2][j], count + 1))
            print('%d %d %d -%d 0' % (A[s][0] * MC_9[7][j], A[s][1] * MC_9[6][j], A[s][5] * MC_9[2][j], count + 1))
            print('%d %d -%d %d 0' % (A[s][0] * MC_9[7][j], A[s][1] * MC_9[6][j], A[s][5] * MC_9[2][j], count + 1))
            print('%d -%d %d %d 0' % (A[s][0] * MC_9[7][j], A[s][1] * MC_9[6][j], A[s][5] * MC_9[2][j], count + 1))
            print('-%d %d %d %d 0' % (A[s][0] * MC_9[7][j], A[s][1] * MC_9[6][j], A[s][5] * MC_9[2][j], count + 1))
            count += 1
        if j==6:
            print('%d -%d -%d -%d 0' % (A[s][1] * MC_9[6][j], A[s][2] * MC_9[5][j], A[s][6] * MC_9[1][j], count + 1))
            print('-%d %d -%d -%d 0' % (A[s][1] * MC_9[6][j], A[s][2] * MC_9[5][j], A[s][6] * MC_9[1][j], count + 1))
            print('-%d -%d %d -%d 0' % (A[s][1] * MC_9[6][j], A[s][2] * MC_9[5][j], A[s][6] * MC_9[1][j], count + 1))
            print('-%d -%d -%d %d 0' % (A[s][1] * MC_9[6][j], A[s][2] * MC_9[5][j], A[s][6] * MC_9[1][j], count + 1))
            print('%d %d %d -%d 0' % (A[s][1] * MC_9[6][j], A[s][2] * MC_9[5][j], A[s][6] * MC_9[1][j], count + 1))
            print('%d %d -%d %d 0' % (A[s][1] * MC_9[6][j], A[s][2] * MC_9[5][j], A[s][6] * MC_9[1][j], count + 1))
            print('%d -%d %d %d 0' % (A[s][1] * MC_9[6][j], A[s][2] * MC_9[5][j], A[s][6] * MC_9[1][j], count + 1))
            print('-%d %d %d %d 0' % (A[s][1] * MC_9[6][j], A[s][2] * MC_9[5][j], A[s][6] * MC_9[1][j], count + 1))
            count += 1
        if j==7:
            print('%d %d -%d 0' % (A[s][2] * MC_9[5][j], A[s][7] * MC_9[0][j], count + 1))
            print('%d -%d %d 0' % (A[s][2] * MC_9[5][j], A[s][7] * MC_9[0][j], count + 1))
            print('-%d %d %d 0' % (A[s][2] * MC_9[5][j], A[s][7] * MC_9[0][j], count + 1))
            print('-%d -%d -%d 0' % (A[s][2] * MC_9[5][j], A[s][7] * MC_9[0][j], count + 1))
            count += 1
def MC2(s):
    # 0x02*0x7c=0x02*0x04+0x02*0x08+0x02*0x10+0x02*0x20+0x02*0x40
    global count
    # MC_2=[[0,0,0,0,0,0,1,0],
    #       [0,0,0,0,0,1,0,0],
    #       [0,0,0,0,1,0,0,0],
    #       [0,0,0,1,0,0,0,0],
    #       [0,0,1,0,0,0,0,0],
    #       [0,1,0,0,0,0,0,0],
    #       [1,0,0,0,0,0,0,0],
    #       [0,0,0,1,1,0,1,1]]
    for j in range(8):
        if j==0:
            print('%d -%d 0'%(A[s][1]*MC_2[6][j],count+1))
            print('-%d %d 0' % (A[s][1] * MC_2[6][j], count + 1))
            count+=1
        if j==1:
            print('%d %d 0'%(A[s][2]*MC_2[5][j],count+1))
            print('-%d %d 0' % (A[s][2] * MC_2[5][j], count + 1))
            count+=1
        if j==2:
            print('%d %d 0' % (A[s][3] * MC_2[4][j], count + 1))
            print('-%d %d 0' % (A[s][3] * MC_2[4][j], count + 1))
            count+=1
        if j==3:
            print('%d %d -%d 0' % (A[s][0] * MC_2[7][j], A[s][4] * MC_2[3][j], count + 1))
            print('%d -%d %d 0' % (A[s][0] * MC_2[7][j], A[s][4] * MC_2[3][j], count + 1))
            print('-%d %d %d 0' % (A[s][0] * MC_2[7][j], A[s][4] * MC_2[3][j], count + 1))
            print('-%d -%d -%d 0' % (A[s][0] * MC_2[7][j], A[s][4] * MC_2[3][j], count + 1))
            count+=1
        if j==4:
            print('%d %d -%d 0' % (A[s][0] * MC_2[7][j], A[s][5] * MC_2[2][j], count + 1))
            print('%d -%d %d 0' % (A[s][0] * MC_2[7][j], A[s][5] * MC_2[2][j], count + 1))
            print('-%d %d %d 0' % (A[s][0] * MC_2[7][j], A[s][5] * MC_2[2][j], count + 1))
            print('-%d -%d -%d 0' % (A[s][0] * MC_2[7][j], A[s][5] * MC_2[2][j], count + 1))
            count+=1
        if j==5:
            print('%d %d 0' % (A[s][6] * MC_2[1][j], count + 1))
            print('-%d %d 0' % (A[s][6] * MC_2[1][j], count + 1))
            count+=1
        if j==6:
            print('%d %d -%d 0' % (A[s][0] * MC_2[7][j], A[s][7] * MC_2[0][j], count + 1))
            print('%d -%d %d 0' % (A[s][0] * MC_2[7][j], A[s][7] * MC_2[0][j], count + 1))
            print('-%d %d %d 0' % (A[s][0] * MC_2[7][j], A[s][7] * MC_2[0][j], count + 1))
            print('-%d -%d -%d 0' % (A[s][0] * MC_2[7][j], A[s][7] * MC_2[0][j], count + 1))
            count+=1
        if j==7:
            print('%d %d 0' % (A[s][0] * MC_2[7][j], count + 1))
            print('-%d %d 0' % (A[s][0] * MC_2[7][j], count + 1))
            count+=1

def final_xor_s1(a):
    # A[0]与MC_9相乘得到的值，A[1]的值，A[2]与MC_2相乘的值  9 1 2
    global count
    for i in range(8):
        count += 1
        print('%d -%d -%d -%d 0' % (count-16, A[a][i], count-8, count))
        print('-%d %d -%d -%d 0' % (count-16, A[a][i], count-8, count ))
        print('-%d -%d %d -%d 0' % (count-16, A[a][i], count-8, count ))
        print('-%d -%d -%d %d 0' % (count-16, A[a][i], count-8, count ))
        print('%d %d %d -%d 0' % (count-16, A[a][i], count-8, count ))
        print('%d %d -%d %d 0' % (count-16, A[a][i], count-8, count ))
        print('%d -%d %d %d 0' % (count-16, A[a][i], count-8, count ))
        print('-%d %d %d %d 0' % (count-16, A[a][i], count-8, count ))


def final_xor_s2(a):
    # 2 9 1
    global count
    for i in range(8):
        count += 1
        print('%d -%d -%d -%d 0' % (count-16, count-8, A[a][i], count ))
        print('-%d %d -%d -%d 0' % (count-16, count-8, A[a][i], count ))
        print('-%d -%d %d -%d 0' % (count-16, count-8, A[a][i], count ))
        print('-%d -%d -%d %d 0' % (count-16, count-8, A[a][i], count ))
        print('%d %d %d -%d 0' % (count-16, count-8, A[a][i], count ))
        print('%d %d -%d %d 0' % (count-16, count-8, A[a][i], count ))
        print('%d -%d %d %d 0' % (count-16, count-8, A[a][i], count ))
        print('-%d %d %d %d 0' % (count-16, count-8, A[a][i], count ))

def final_xor_s3(a):
    # 1 2 9
    global count
    for i in range(8):
        count += 1
        print('%d -%d -%d -%d 0' % (A[a][i],count - 16, count - 8, count ))
        print('-%d %d -%d -%d 0' % (A[a][i],count - 16, count - 8, count ))
        print('-%d -%d %d -%d 0' % (A[a][i],count - 16, count - 8, count ))
        print('-%d -%d -%d %d 0' % (A[a][i],count - 16, count - 8, count ))
        print('%d %d %d -%d 0' % (A[a][i],count - 16, count - 8, count ))
        print('%d %d -%d %d 0' % (A[a][i],count - 16, count - 8, count ))
        print('%d -%d %d %d 0' % (A[a][i],count - 16, count - 8, count ))
        print('-%d %d %d %d 0' % (A[a][i],count - 16, count - 8, count ))

# MC后的变量
count=801
#   s1  9 1 2
print('S1')
MC9(0)
MC2(2)
print('s1')
final_xor_s1(1)

# s2 2 9 1
print('S2')
MC2(0)
MC9(1)
print('s2')
final_xor_s2(2)

# s3 1 2 9
print('S3')
MC2(1)
MC9(2)
print('s3')
final_xor_s3(0)

# s4 9 1 2
# MC9(3)
# MC2(5)
# print('s4')
# final_xor_s1(4)

# s5 2 9 1
# MC2(3)
# MC9(4)
# print('s5')
# final_xor_s2(5)

# # s6 1 2 9
# MC2(4)
# MC9(5)
# print('s6')
# final_xor_s3(3)
